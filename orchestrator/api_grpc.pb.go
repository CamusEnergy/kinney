// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package orchestrator

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// OrchestratorClient is the client API for Orchestrator service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrchestratorClient interface {
	// Provide status updates and receive directives regarding an electrical
	// vehicle charging point. Client is a controller for one or more charging
	// points, and server is an optimizing coordinator. See Session and Command
	// messages below for details of the requests and responses.
	Charger(ctx context.Context, opts ...grpc.CallOption) (Orchestrator_ChargerClient, error)
}

type orchestratorClient struct {
	cc grpc.ClientConnInterface
}

func NewOrchestratorClient(cc grpc.ClientConnInterface) OrchestratorClient {
	return &orchestratorClient{cc}
}

func (c *orchestratorClient) Charger(ctx context.Context, opts ...grpc.CallOption) (Orchestrator_ChargerClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Orchestrator_serviceDesc.Streams[0], "/kinney.Orchestrator/Charger", opts...)
	if err != nil {
		return nil, err
	}
	x := &orchestratorChargerClient{stream}
	return x, nil
}

type Orchestrator_ChargerClient interface {
	Send(*ChargerSession) error
	Recv() (*ChargerCommand, error)
	grpc.ClientStream
}

type orchestratorChargerClient struct {
	grpc.ClientStream
}

func (x *orchestratorChargerClient) Send(m *ChargerSession) error {
	return x.ClientStream.SendMsg(m)
}

func (x *orchestratorChargerClient) Recv() (*ChargerCommand, error) {
	m := new(ChargerCommand)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// OrchestratorServer is the server API for Orchestrator service.
// All implementations must embed UnimplementedOrchestratorServer
// for forward compatibility
type OrchestratorServer interface {
	// Provide status updates and receive directives regarding an electrical
	// vehicle charging point. Client is a controller for one or more charging
	// points, and server is an optimizing coordinator. See Session and Command
	// messages below for details of the requests and responses.
	Charger(Orchestrator_ChargerServer) error
	mustEmbedUnimplementedOrchestratorServer()
}

// UnimplementedOrchestratorServer must be embedded to have forward compatible implementations.
type UnimplementedOrchestratorServer struct {
}

func (*UnimplementedOrchestratorServer) Charger(Orchestrator_ChargerServer) error {
	return status.Errorf(codes.Unimplemented, "method Charger not implemented")
}
func (*UnimplementedOrchestratorServer) mustEmbedUnimplementedOrchestratorServer() {}

func RegisterOrchestratorServer(s *grpc.Server, srv OrchestratorServer) {
	s.RegisterService(&_Orchestrator_serviceDesc, srv)
}

func _Orchestrator_Charger_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(OrchestratorServer).Charger(&orchestratorChargerServer{stream})
}

type Orchestrator_ChargerServer interface {
	Send(*ChargerCommand) error
	Recv() (*ChargerSession, error)
	grpc.ServerStream
}

type orchestratorChargerServer struct {
	grpc.ServerStream
}

func (x *orchestratorChargerServer) Send(m *ChargerCommand) error {
	return x.ServerStream.SendMsg(m)
}

func (x *orchestratorChargerServer) Recv() (*ChargerSession, error) {
	m := new(ChargerSession)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Orchestrator_serviceDesc = grpc.ServiceDesc{
	ServiceName: "kinney.Orchestrator",
	HandlerType: (*OrchestratorServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Charger",
			Handler:       _Orchestrator_Charger_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "orchestrator/api.proto",
}
