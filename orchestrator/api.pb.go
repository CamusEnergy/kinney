// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.12.1
// source: orchestrator/api.proto

package orchestrator

import (
	proto "github.com/golang/protobuf/proto"
	duration "github.com/golang/protobuf/ptypes/duration"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// Client provides a stream of Session messages to the server, which should be
// in chronological order by measured time. Server estimates the state of charge
// using the inferred charging rate and patterns from prior sessions at nearby
// charging points. Server uses this information to prioritize ongoing sessions
// when curtailment is necessary.
//
// During a charging session, Session messages have a start time but no end
// time. Once the session terminates, client should send a Session message with
// start and end times both set. Otherwise server treats a session as terminated
// when another (later) session begins on the same point.
//
// Minutely session updates are conventional, although server must accept
// udpates at any frequency.
type ChargerSession struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required opaque connector identifier, usually a single port on a charging
	// station, which must not change during a session.
	Point string `protobuf:"bytes,1,opt,name=point,proto3" json:"point,omitempty"`
	// Required opaque vehicle identifier. This must not change during a single
	// charging session. It should also not change between sessions, since the
	// server uses it to predict energy requirements based on previous sessions.
	// Thus VIN, proximity token ID, account number, or a salted hash thereof are
	// all suitable options.
	Vehicle string `protobuf:"bytes,2,opt,name=vehicle,proto3" json:"vehicle,omitempty"`
	// Immediate power flow across the charging point. Positives values indicate
	// power flowing towards the vehicle, and negative values indicate power
	// flowing from the vehicle.
	//
	// Instantaneous readings are acceptable. Averaged readings over a time
	// window are also acceptable, provided the window size is close to the
	// reporting interval. Minutely averages are conventional.
	//
	// Sessions should be ignored if this value is not known--in other words, do
	// not use zero as unknown.
	Watts float64 `protobuf:"fixed64,3,opt,name=watts,proto3" json:"watts,omitempty"`
	// Required instant at which the energy consumption was read, which must not
	// be before the start time, and should not be after the end time.
	Measured *timestamp.Timestamp `protobuf:"bytes,4,opt,name=measured,proto3" json:"measured,omitempty"`
	// Required instant at which the session was established, typically the point
	// of electrical contact of the plug, but potentially the point when power
	// begins to flow. This must not change during a session.
	Start *timestamp.Timestamp `protobuf:"bytes,5,opt,name=start,proto3" json:"start,omitempty"`
	// Optional instant at which the session was terminated, typically the point
	// of electrical separation of the plug, but potentially the point when power
	// ceases to flow. This is absent for ongoing sessions, and
	End *timestamp.Timestamp `protobuf:"bytes,6,opt,name=end,proto3" json:"end,omitempty"`
}

func (x *ChargerSession) Reset() {
	*x = ChargerSession{}
	if protoimpl.UnsafeEnabled {
		mi := &file_orchestrator_api_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChargerSession) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChargerSession) ProtoMessage() {}

func (x *ChargerSession) ProtoReflect() protoreflect.Message {
	mi := &file_orchestrator_api_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChargerSession.ProtoReflect.Descriptor instead.
func (*ChargerSession) Descriptor() ([]byte, []int) {
	return file_orchestrator_api_proto_rawDescGZIP(), []int{0}
}

func (x *ChargerSession) GetPoint() string {
	if x != nil {
		return x.Point
	}
	return ""
}

func (x *ChargerSession) GetVehicle() string {
	if x != nil {
		return x.Vehicle
	}
	return ""
}

func (x *ChargerSession) GetWatts() float64 {
	if x != nil {
		return x.Watts
	}
	return 0
}

func (x *ChargerSession) GetMeasured() *timestamp.Timestamp {
	if x != nil {
		return x.Measured
	}
	return nil
}

func (x *ChargerSession) GetStart() *timestamp.Timestamp {
	if x != nil {
		return x.Start
	}
	return nil
}

func (x *ChargerSession) GetEnd() *timestamp.Timestamp {
	if x != nil {
		return x.End
	}
	return nil
}

// Server sends a stream of Commands to client, each of which replaces any prior
// command for the same point. So the client applies the limit only from the
// most recent command.
type ChargerCommand struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Opaque connector identifier to which the command applies, usually a single
	// port on a charging station.
	Point string `protobuf:"bytes,1,opt,name=point,proto3" json:"point,omitempty"`
	// Recommended upper bound on charging power in watts. Zero requests that
	// charging cease entirely and infinity advises charging without orchestrator
	// limitations. A negative limit recommends returning energy to the charger,
	// referred to as "V2G" (vehicle to grid) or "V2H" (vehicle to home).
	//
	// Limit applies to any session on the charger, including an ongoing session
	// or a new session.
	//
	// This is "recommended", because the server must not depend on compliance;
	// instead, it should observe compliance via the Session stream.
	Limit float64 `protobuf:"fixed64,2,opt,name=limit,proto3" json:"limit,omitempty"` // Watts
	// Disregard this command after a period of time, after which client should
	// return to its default state. Commands have no explicit expiration if
	// lifetime is absent, but clients are not required to persist limits
	// prolongedly.
	Lifetime *duration.Duration `protobuf:"bytes,3,opt,name=lifetime,proto3" json:"lifetime,omitempty"`
}

func (x *ChargerCommand) Reset() {
	*x = ChargerCommand{}
	if protoimpl.UnsafeEnabled {
		mi := &file_orchestrator_api_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChargerCommand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChargerCommand) ProtoMessage() {}

func (x *ChargerCommand) ProtoReflect() protoreflect.Message {
	mi := &file_orchestrator_api_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChargerCommand.ProtoReflect.Descriptor instead.
func (*ChargerCommand) Descriptor() ([]byte, []int) {
	return file_orchestrator_api_proto_rawDescGZIP(), []int{1}
}

func (x *ChargerCommand) GetPoint() string {
	if x != nil {
		return x.Point
	}
	return ""
}

func (x *ChargerCommand) GetLimit() float64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *ChargerCommand) GetLifetime() *duration.Duration {
	if x != nil {
		return x.Lifetime
	}
	return nil
}

var File_orchestrator_api_proto protoreflect.FileDescriptor

var file_orchestrator_api_proto_rawDesc = []byte{
	0x0a, 0x16, 0x6f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2f, 0x61,
	0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06, 0x6b, 0x69, 0x6e, 0x6e, 0x65, 0x79,
	0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0xee, 0x01, 0x0a, 0x0e, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x72, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65,
	0x68, 0x69, 0x63, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x68,
	0x69, 0x63, 0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x61, 0x74, 0x74, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x05, 0x77, 0x61, 0x74, 0x74, 0x73, 0x12, 0x36, 0x0a, 0x08, 0x6d, 0x65,
	0x61, 0x73, 0x75, 0x72, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72,
	0x65, 0x64, 0x12, 0x30, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x05, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x12, 0x2c, 0x0a, 0x03, 0x65, 0x6e, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x03, 0x65,
	0x6e, 0x64, 0x22, 0x73, 0x0a, 0x0e, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x72, 0x43, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x12, 0x35, 0x0a, 0x08, 0x6c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x6c,
	0x69, 0x66, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x32, 0x4f, 0x0a, 0x0c, 0x4f, 0x72, 0x63, 0x68, 0x65,
	0x73, 0x74, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x3f, 0x0a, 0x07, 0x43, 0x68, 0x61, 0x72, 0x67,
	0x65, 0x72, 0x12, 0x16, 0x2e, 0x6b, 0x69, 0x6e, 0x6e, 0x65, 0x79, 0x2e, 0x43, 0x68, 0x61, 0x72,
	0x67, 0x65, 0x72, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x1a, 0x16, 0x2e, 0x6b, 0x69, 0x6e,
	0x6e, 0x65, 0x79, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x22, 0x00, 0x28, 0x01, 0x30, 0x01, 0x42, 0x2c, 0x5a, 0x2a, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x43, 0x61, 0x6d, 0x75, 0x73, 0x45, 0x6e, 0x65, 0x72,
	0x67, 0x79, 0x2f, 0x6b, 0x69, 0x6e, 0x6e, 0x65, 0x79, 0x2f, 0x6f, 0x72, 0x63, 0x68, 0x65, 0x73,
	0x74, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_orchestrator_api_proto_rawDescOnce sync.Once
	file_orchestrator_api_proto_rawDescData = file_orchestrator_api_proto_rawDesc
)

func file_orchestrator_api_proto_rawDescGZIP() []byte {
	file_orchestrator_api_proto_rawDescOnce.Do(func() {
		file_orchestrator_api_proto_rawDescData = protoimpl.X.CompressGZIP(file_orchestrator_api_proto_rawDescData)
	})
	return file_orchestrator_api_proto_rawDescData
}

var file_orchestrator_api_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_orchestrator_api_proto_goTypes = []interface{}{
	(*ChargerSession)(nil),      // 0: kinney.ChargerSession
	(*ChargerCommand)(nil),      // 1: kinney.ChargerCommand
	(*timestamp.Timestamp)(nil), // 2: google.protobuf.Timestamp
	(*duration.Duration)(nil),   // 3: google.protobuf.Duration
}
var file_orchestrator_api_proto_depIdxs = []int32{
	2, // 0: kinney.ChargerSession.measured:type_name -> google.protobuf.Timestamp
	2, // 1: kinney.ChargerSession.start:type_name -> google.protobuf.Timestamp
	2, // 2: kinney.ChargerSession.end:type_name -> google.protobuf.Timestamp
	3, // 3: kinney.ChargerCommand.lifetime:type_name -> google.protobuf.Duration
	0, // 4: kinney.Orchestrator.Charger:input_type -> kinney.ChargerSession
	1, // 5: kinney.Orchestrator.Charger:output_type -> kinney.ChargerCommand
	5, // [5:6] is the sub-list for method output_type
	4, // [4:5] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_orchestrator_api_proto_init() }
func file_orchestrator_api_proto_init() {
	if File_orchestrator_api_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_orchestrator_api_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChargerSession); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_orchestrator_api_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChargerCommand); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_orchestrator_api_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_orchestrator_api_proto_goTypes,
		DependencyIndexes: file_orchestrator_api_proto_depIdxs,
		MessageInfos:      file_orchestrator_api_proto_msgTypes,
	}.Build()
	File_orchestrator_api_proto = out.File
	file_orchestrator_api_proto_rawDesc = nil
	file_orchestrator_api_proto_goTypes = nil
	file_orchestrator_api_proto_depIdxs = nil
}
