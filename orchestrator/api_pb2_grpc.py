# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

from orchestrator import api_pb2 as orchestrator_dot_api__pb2


class OrchestratorStub(object):
    """Missing associated documentation comment in .proto file"""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Charger = channel.stream_stream(
                '/kinney.Orchestrator/Charger',
                request_serializer=orchestrator_dot_api__pb2.ChargerSession.SerializeToString,
                response_deserializer=orchestrator_dot_api__pb2.ChargerCommand.FromString,
                )


class OrchestratorServicer(object):
    """Missing associated documentation comment in .proto file"""

    def Charger(self, request_iterator, context):
        """Provide status updates and receive directives regarding an electrical
        vehicle charging point. Client is a controller for one or more charging
        points, and server is an optimizing coordinator. See Session and Command
        messages below for details of the requests and responses.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_OrchestratorServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Charger': grpc.stream_stream_rpc_method_handler(
                    servicer.Charger,
                    request_deserializer=orchestrator_dot_api__pb2.ChargerSession.FromString,
                    response_serializer=orchestrator_dot_api__pb2.ChargerCommand.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'kinney.Orchestrator', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Orchestrator(object):
    """Missing associated documentation comment in .proto file"""

    @staticmethod
    def Charger(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/kinney.Orchestrator/Charger',
            orchestrator_dot_api__pb2.ChargerSession.SerializeToString,
            orchestrator_dot_api__pb2.ChargerCommand.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)
